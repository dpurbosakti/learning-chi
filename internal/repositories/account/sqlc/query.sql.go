// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package account

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    name, email, phone, password
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, email, phone, password, password_changed_at, created_at, updated_at, is_email_verified
`

type CreateAccountParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Phone    string `json:"phone"`
	Password string `json:"password"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Password,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE FROM accounts
WHERE id = $1
RETURNING id, name, email, phone, password, password_changed_at, created_at, updated_at, is_email_verified
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, deleteAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getDetailAccount = `-- name: GetDetailAccount :one
SELECT id, name, email, phone, password_changed_at, created_at, updated_at, is_email_verified
FROM accounts
WHERE id = $1
`

type GetDetailAccountRow struct {
	ID                uuid.UUID          `json:"id"`
	Name              string             `json:"name"`
	Email             string             `json:"email"`
	Phone             string             `json:"phone"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	CreatedAt         time.Time          `json:"created_at"`
	UpdatedAt         time.Time          `json:"updated_at"`
	IsEmailVerified   bool               `json:"is_email_verified"`
}

func (q *Queries) GetDetailAccount(ctx context.Context, id uuid.UUID) (GetDetailAccountRow, error) {
	row := q.db.QueryRow(ctx, getDetailAccount, id)
	var i GetDetailAccountRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getListAccount = `-- name: GetListAccount :many
SELECT id, name, email, phone, password_changed_at, created_at, updated_at, is_email_verified
FROM accounts
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetListAccountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetListAccountRow struct {
	ID                uuid.UUID          `json:"id"`
	Name              string             `json:"name"`
	Email             string             `json:"email"`
	Phone             string             `json:"phone"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	CreatedAt         time.Time          `json:"created_at"`
	UpdatedAt         time.Time          `json:"updated_at"`
	IsEmailVerified   bool               `json:"is_email_verified"`
}

func (q *Queries) GetListAccount(ctx context.Context, arg GetListAccountParams) ([]GetListAccountRow, error) {
	rows, err := q.db.Query(ctx, getListAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetListAccountRow{}
	for rows.Next() {
		var i GetListAccountRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsEmailVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET 
    name = $2,
    email = $3,
    phone = $4,
    password = $5,
    password_changed_at = $6,
    updated_at = CURRENT_TIMESTAMP,
    is_email_verified = $7
WHERE id = $1
RETURNING id, name, email, phone, password, password_changed_at, created_at, updated_at, is_email_verified
`

type UpdateAccountParams struct {
	ID                uuid.UUID          `json:"id"`
	Name              string             `json:"name"`
	Email             string             `json:"email"`
	Phone             string             `json:"phone"`
	Password          string             `json:"password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	IsEmailVerified   bool               `json:"is_email_verified"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Password,
		arg.PasswordChangedAt,
		arg.IsEmailVerified,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}
